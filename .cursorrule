# Rule: Chess Action Space Representation

When discussing or implementing the chess action space for this project, adhere to the following:

**1. Project's Chosen Action Space ("Pawn-Forever", ~1700 Actions):**
    *   **Goal:** Minimize total action space size while handling promotions.
    *   **Concept:** Pawns conceptually remain pawns but gain conditional access to promoted piece moves upon reaching the final rank. Action IDs are assigned based on the *initial* piece instance.
    *   **Structure:** Uses Absolute Action IDs (`Base ID + Relative ID - 1`).
    *   **Total Size:** ~1700 (850 per side).
    *   **Base Pieces (per side, 194 actions):**
        *   1 King (10 relative actions: 8 standard + 2 castling)
        *   1 Queen (56 relative actions)
        *   2 Rooks (28 relative actions each)
        *   2 Knights (8 relative actions each)
        *   2 Bishops (28 relative actions each)
    *   **Pawns (per side, 8 instances x 82 relative actions = 656 actions):**
        *   **18 Pawn-Specific Relative Actions:**
            *   6 basic moves (Fwd1, Fwd2, CapL, CapR, EPL, EPR).
            *   12 promotion moves (Fwd/CapL/CapR for Q, N, B, R).
        *   **56 embedded Queen moves** (conditional on pawn state).
        *   **8 embedded Knight moves** (conditional on pawn state).
    *   **Implementation:** Requires significant custom logic for state representation and conditional action masking based on whether a piece associated with a pawn slot has been promoted and to what.
    *   **Status:** This is the **preferred approach** for the project.

**2. Alternative Representations (Context):**
    *   **AlphaZero Standard (4672 Actions):** 8x8 source squares Ã— 73 move type planes. Useful context but not the project's implementation.
    *   **Standard Max Instance (~2596 Actions):** Explicitly reserves action space for max theoretical pieces (9Q, 10R, etc.). Uses standard piece transformation. Considered but not chosen due to larger action space size.

**Guidance:**

*   **Default to discussing and implementing based on the "Pawn-Forever" scheme (1).**
*   Acknowledge the AlphaZero standard (2a) for context if needed.
*   Clearly state the requirement for custom conditional logic when implementing the chosen scheme (1).
*   Ensure `uci_to_*_action_id` functions and base ID calculations align with the 82 relative pawn actions and the 1700 total space.
*   **Note on Editing .ipynb:** When proposing code changes for `.ipynb` files, present the code directly in the chat instead of using file editing tools, as these can cause issues with notebook structure.
*   **Note on Editing Snippets:** If editing reference code provided by the user (e.g., via selection) that lacks necessary import statements, provide only the modified function or code block itself; do not add or guess imports unless specifically requested.